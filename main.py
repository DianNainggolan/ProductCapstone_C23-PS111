# -*- coding: utf-8 -*-
"""main_V3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BxX4yqhVxevllb120HCVzn9MdBCDXF7P

Hal yang harus dilakukan sebelum itu:
1. memastikan bucket
2. enable Translation API beserta credentials
note: kode bahasa -> https://cloud.google.com/translate/docs/languages

Menerjemahkan teks input ke bahasa model:
translated_text = translate_text(kalimat, 'en')

Menjalankan prediksi menggunakan model:
predict_text_sentiment(translated_text, new_model, tokenizer)
"""

#pip install google-cloud-translate

#Importing library
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
import pickle
import requests
import os
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'credentials.json'
from google.cloud import translate_v2 as translate
import contractions
import spacy
import re
import string

# Fungsi untuk melakukan preprocessing pada teks
def preprocessing(sentence):
    # Convert text to lowercase
    sentence = sentence.lower()
    # contraction some word
    sentence = contractions.fix(sentence)
    # remove number
    sentence = re.sub(r'\d+', '', sentence)
    # remove punctuation
    sentence = sentence.translate(str.maketrans('', '', string.punctuation))

    # remove stopword
    en = spacy.load('en_core_web_sm')
    stopwords = en.Defaults.stop_words
    text_split = sentence.split()
    text = [word for word in text_split if not word in stopwords]
    sentence = ' '.join(text)

    # remove extrawhitespace
    sentence = sentence.strip()
    return sentence

# Mendapatkan teks input dari pengguna
kalimat = input('Masukkan teks: ')

# Melakukan preprocessing pada teks
kalimat = preprocessing(kalimat)

# Inisialisasi klien Cloud Translation
translate_client = translate.Client()

# Menerjemahkan teks input ke bahasa Inggris
translation = translate_client.translate(
    kalimat,
    target_language='en'
)

# Mendapatkan teks hasil terjemahan
translated_text = translation['translatedText']

# Mendownload model dari bucket
def download_model():
    url = 'https://storage.googleapis.com/health-diary-bucket/saved_model.h5'
    response = requests.get(url)
    with open('saved_model.h5', 'wb') as f:
        f.write(response.content)

# Mendownload tokenizer dari bucket
def download_tokenizer():
    url = 'https://storage.googleapis.com/health-diary-bucket/tokenizer.pickle'
    response = requests.get(url)
    with open('tokenizer.pickle', 'wb') as f:
        f.write(response.content)

# Memuat model dan tokenizer
def load_model_tokenizer():
    download_model()
    download_tokenizer()

    new_model = tf.keras.models.load_model('saved_model.h5')

    with open('tokenizer.pickle', 'rb') as handle:
        tokenizer = pickle.load(handle)

    return new_model, tokenizer

# Prediksi menggunakan model dan tokenizer yang dimuat
def predict_text_sentiment(seed_text, model, tokenizer):
    token_list = tokenizer.texts_to_sequences([seed_text])[0]
    # Pad the sequences
    token_list = pad_sequences([token_list], padding='post')
    # Get the probabilities of predicting a word
    predicted = model.predict(token_list, verbose=0)[0]
    print('Probabilitas:')
    print('Anxiety : {:.2%}'.format(predicted[0]))
    print('Depresi : {:.2%}'.format(predicted[1]))
    print('Lonely : {:.2%}'.format(predicted[2]))
    print('Normal : {:.2%}'.format(predicted[3]))

# Memuat model dan tokenizer
new_model, tokenizer = load_model_tokenizer()

# Fungsi untuk menerjemahkan teks menggunakan Google Cloud Translation API
def translate_text(text, target_language):
    translation = translate_client.translate(
        text,
        target_language=target_language
    )
    translated_text = translation['translatedText']
    return translated_text

# Mendapatkan input teks dari pengguna
#input_text = input('Masukkan teks: ')

# Mendapatkan kode bahasa input dari pengguna
#input_language = input('Masukkan kode bahasa input: ')

# Menerjemahkan teks input ke bahasa Inggris
translated_text = translate_text(input_text, 'en')

# Menjalankan prediksi menggunakan model
predict_text_sentiment(translated_text, new_model, tokenizer)